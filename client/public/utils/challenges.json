[
  {
    "id": 1,
    "level": "easy",
    "category": "String",
    "title": "Uppercase First Letter",
    "description": "Create a function named 'upperCaseFirstLetter' that takes a string as its parameter.\n\n This function should return a new string with the first letter of each word converted to uppercase.\n\n Ensure that each word is separated by a single space, and any leading or trailing whitespace is removed.",
    "functionName": "upperCaseFirstLetter",
    "initialCode": "function upperCaseFirstLetter(str) {\n  // Write your code here\n}",
    "solution": "function upperCaseFirstLetter(str) {\n  return str\n    .split(\" \")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n}",
    "note": "Example:\nGiven the input string 'hello world', the function should return 'Hello World'.\nFor the input 'javaScript is fun', the expected output is 'JavaScript Is Fun'.\nNote that any additional spaces between words should be reduced to a single space in the returned string."
  },
  {
    "id": 2,
    "level": "easy",
    "category": "String",
    "title": "Alphabetical Order",
    "description": "Create a function named 'alphabeticalOrder' that takes a single string argument. \n\nThe function should return a new string with all the letters from the original string in alphabetical order. \n\nAny non-letter characters should be ignored, and the function should not be case-sensitive.",
    "functionName": "alphabeticalOrder",
    "initialCode": "function alphabeticalOrder(str) {\n  // Write your code here\n}",
    "solution": "function alphabeticalOrder(str) {\n  return str.split(\"\").sort().join(\"\");\n}",
    "note": "Example:\nGiven the input string 'webmaster', the function should return 'abeemrstw'.\nWhen the input is 'Software', the expected output is 'aeforst'.\nNotice that the capital 'S' is treated the same as a lowercase 's'."
  },
  {
    "id": 3,
    "level": "easy",
    "category": "Array",
    "title": "Remove Duplicates",
    "description": "Design a function named 'removeDuplicates' that takes an array as input and returns a new array with all duplicate elements removed, preserving only unique elements.\n\nThe order of elements in the output should reflect their first occurrence in the input array.",
    "functionName": "removeDuplicates",
    "initialCode": "function removeDuplicates(arr) {\n  // Your code here\n}",
    "note": "For example, given the array [1, 2, 2, 3, 4, 4, 4, 5], the function should return [1, 2, 3, 4, 5].",
    "solution": "function removeDuplicates(arr) {\n  return [...new Set(arr)];\n}"
  },

  {
    "id": 4,
    "level": "easy",
    "category": "String",
    "title": "Palindrome Checker",
    "description": "Implement a function named 'isPalindrome' that checks if a given string is a palindrome.\n\nA palindrome is a sequence that reads the same backward as forward.\n\nThe checking should ignore spaces, punctuation, and capitalization.",
    "functionName": "isPalindrome",
    "initialCode": "function isPalindrome(str) {\n  // Write your code here\n}",
    "note": "For example, the string 'A man, a plan, a canal: Panama' is a palindrome.\n\nHowever, 'Palindrome' is not a palindrome.",
    "solution": "function isPalindrome(str) {\n  const cleanedStr = str.toLowerCase().replace(/[^a-z0-9]+/g, \"\");\n  return cleanedStr === cleanedStr.split(\"\").reverse().join(\"\");\n}"
  },
  {
    "id": 5,
    "level": "easy",
    "category": "Maths",
    "title": "Cube Volume Calculator",
    "description": "Construct a JavaScript function called 'calculateCubeVolume' that computes the volume of a cube.\n\nThe function should accept one parameter: the length of an edge of the cube.\n\nIt must return the cube's volume, which is the cube of the edge length.",
    "functionName": "calculateCubeVolume",
    "initialCode": "function calculateCubeVolume(side) {\n  // Write your code here\n}",
    "note": "For instance, if the length of the cube's side is 3, the volume is 27 because the cube of 3 is 3^3 or 3*3*3, which equals 27.",
    "solution": "function calculateCubeVolume(side) {\n  return Math.pow(side, 3);\n}"
  },

  {
    "id": 6,
    "level": "easy",
    "category": "Date and Time",
    "title": "Is Weekend",
    "description": "Construct a JavaScript function named 'isWeekend' that determines if a provided date falls on a weekend.\n\nThe function should return `true` if the date represents either a Saturday or a Sunday, which are typically considered the weekend in many cultures.\n\nIt should return `false` for any other day of the week.",
    "functionName": "isWeekend",
    "initialCode": "function isWeekend(date) {\n  // Write your code here\n}",
    "solution": "function isWeekend(date) {\n  if (!(date instanceof Date)) {\n    throw new Error(\"Input is not a Date object\");\n  }\n\n  const dayOfWeek = date.getDay();\n  return dayOfWeek === 0 || dayOfWeek === 6;\n}",
    "note": "For example, if the input to the function is a Date object representing a Saturday or Sunday, the function should return `true`.\n\nConversely, if the input represents any other day, such as a Monday or a Wednesday, the function should return `false`.\n\nEnsure that the input to the function is indeed a Date object to avoid erroneous results."
  },
  {
    "id": 7,
    "level": "easy",
    "category": "OOP",
    "title": "Create a Person Class",
    "description": "Design a class named 'Person' that represents a person with properties for their name and age.\n\nThe class should include a method 'displayInfo' which prints the person's details in the format: \"Name: [name], Age: [age]\".",
    "functionName": "Person",
    "initialCode": "class Person {\n   // Your code here\n}",
    "note": "For example, creating an instance with 'new Person(\"Jane Doe\", 32)' and calling 'displayInfo' on that instance should print: \"Name: Jane Doe, Age: 32\" to the console.",
    "solution": "class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  displayInfo() {\n    console.log(`Name: ${this.name}, Age: ${this.age}`);\n  }\n}"
  },

  {
    "id": 8,
    "level": "easy",
    "category": "Maths",
    "title": "Power of Two Checker",
    "description": "Develop a JavaScript function called 'isPowerOfTwo' that checks whether a given number is a power of 2.\n\nA number is a power of two if there is an exponent such that 2 raised to that exponent equals the number.\n\nFor example, 8 is a power of two because it equals 2^3.",
    "functionName": "isPowerOfTwo",
    "initialCode": "function isPowerOfTwo(num) {\n  // Write your code here\n}",
    "note": "The function should return true for numbers like 1 (2^0), 2 (2^1), 4 (2^2), 8 (2^3), and so on.\n\nIt should return false for any number that cannot be expressed as 2 raised to an integer.",
    "solution": "function isPowerOfTwo(num) {\n  if (num < 1) {\n    return false;\n  }\n  return (num & (num - 1)) === 0;\n}"
  },
  {
    "id": 9,
    "level": "easy",
    "category": "String",
    "title": "Roman Numeral to Integer Converter",
    "description": "Create a JavaScript function named 'romanToInt' that converts a string of Roman numerals to an integer value.\n\nThe function should analyze the string and return the corresponding integer value if the string is a valid Roman numeral.\n\nIf the string is not a valid Roman numeral, the function should return 0.",
    "functionName": "romanToInt",
    "initialCode": "function romanToInt(s) {\n  // Write your code here\n}",
    "note": "For example, the Roman numeral 'XIV' should be converted to the integer 14.\n\nThe numeral 'MMXVIII' should convert to 2018.\n\nInvalid strings or those that do not follow Roman numeral conventions should return 0.",
    "solution": "function romanToInt(s) {\n  const romanMap = {\n    'I': 1,\n    'V': 5,\n    'X': 10,\n    'L': 50,\n    'C': 100,\n    'D': 500,\n    'M': 1000\n  };\n  let total = 0;\n  let previousValue = 0;\n  for (let i = s.length - 1; i >= 0; i--) {\n    const currentValue = romanMap[s[i]];\n    if (currentValue < previousValue) {\n      total -= currentValue;\n    } else {\n      total += currentValue;\n    }\n    previousValue = currentValue;\n  }\n  return total;\n}"
  },
  {
    "id": 10,
    "level": "easy",
    "category": "Date and Time",
    "title": "Check if is a Date Object",
    "description": "Design a function 'isDateObject' that determines whether an input is a Date object.\n\nThe function should return `true` for Date objects and `false` for any other type of input.",
    "functionName": "isDateObject",
    "initialCode": "function isDateObject(input) {\n  // Write your code here\n}",
    "note": "For instance, calling isDateObject(new Date()) should return `true`.\n\nMeanwhile, isDateObject('2021-10-15') should return `false` as it's a string representation of a date, not a Date object itself.",
    "solution": "function isDateObject(input) {\n  return input instanceof Date;\n}"
  },
  {
    "id": 11,
    "level": "easy",
    "category": "Maths",
    "title": "Find the Missing Number",
    "description": "Design a JavaScript function named 'findMissingNumber' that identifies the missing number in a sequence of integers.\n\nFirst, ensure the array is sorted in ascending order.\n\nThen, examine the array to find the missing integer that disrupts the sequence and return it.",
    "functionName": "findMissingNumber",
    "initialCode": "function findMissingNumber(arr) {\n  // Write your code here\n}",
    "note": "Consider an array representing a sequence like [1, 2, 4, 5]. The missing number here is 3, as it does not appear between 2 and 4.\n\nThe function should return 3 in this case.\n\nIf the array does not miss any numbers in the sequence, the function may return a value indicating that the sequence is complete.",
    "solution": "function findMissingNumber(arr) {\n  arr.sort((a, b) => a - b);\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] - arr[i - 1] > 1) {\n      return arr[i - 1] + 1;\n    }\n  }\n  // If no missing number is found, return a message or a specific value\n}"
  },
  {
    "id": 12,
    "level": "medium",
    "category": "String",
    "title": "Find First Non-Repeated Character",
    "description": "Develop a JavaScript function called 'firstNonRepeatedCharacter' that searches for the first character in a string that is not repeated elsewhere in the string.\n\nThe function should return the non-repeated character if found; otherwise, it should return null.",
    "functionName": "firstNonRepeatedCharacter",
    "initialCode": "function firstNonRepeatedCharacter(str) {\n  // Write your code here\n}",
    "note": "For example, in the string 'abacddbec', the first non-repeated character is 'e'.\n\nWhen passed this string, the function should return 'e'.\n\nIf every character is repeated, return null.",
    "solution": "function firstNonRepeatedCharacter(str) {\n  const charCount = {};\n  for (const char of str) {\n    charCount[char] = (charCount[char] || 0) + 1;\n  }\n  for (const char of str) {\n    if (charCount[char] === 1) {\n      return char;\n    }\n  }\n  return null;\n}"
  },
  {
    "id": 13,
    "level": "easy",
    "category": "String",
    "title": "Letter Occurrences Counter",
    "description": "Compose a JavaScript function named 'letterOccurrences' that calculates the number of times each letter appears in a given string.\n\nThe function should return an object where the keys are letters and the values are the counts of occurrences.\n\nNon-letter characters should be ignored, and the function should be case-insensitive.",
    "functionName": "letterOccurrences",
    "initialCode": "function letterOccurrences(str) {\n  // Write your code here\n}",
    "note": "For instance, given the string 'hello world', the function would return an object such as { 'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1 }.\n\nNotice how non-letter characters are not included in the count, and 'l' has a count of 3 since it appears three times.",
    "solution": "function letterOccurrences(str) {\n  const occurrences = {};\n  for (const char of str.replace(/[^a-zA-Z]/g, '')) {\n    const lowerChar = char.toLowerCase();\n    occurrences[lowerChar] = (occurrences[lowerChar] || 0) + 1;\n  }\n  return occurrences;\n}"
  },
  {
    "id": 14,
    "level": "medium",
    "category": "Algorithm",
    "title": "Binary Search",
    "description": "Write a JavaScript function for searching a number in a sorted array of numbers using binary search.\n\nThe function should return the index of the target number if it is present in the array.\n\nIf the number is not present in the array, return -1.\n\nRemember that binary search is an efficient algorithm that halves the search space on each iteration, so it requires the array to be sorted before searching.",
    "functionName": "binarySearch",
    "initialCode": "function binarySearch(arr, target) {\n  // Write your code here\n}",
    "solution": "function binarySearch(arr, target) {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === target) return mid;\n    if (arr[mid] < target) left = mid + 1;\n    else right = mid - 1;\n  }\n  return -1;\n}",
    "note": "Example:\nGiven an array [1, 3, 5, 7, 9] and a target value 5, the call binarySearch([1, 3, 5, 7, 9], 5) should return the index 2, since 5 is located at index 2 in the array. If the target value is not found in the array, for instance, binarySearch([1, 3, 5, 7, 9], 2), the function should return -1."
  },
  {
    "id": 15,
    "level": "easy",
    "category": "Maths",
    "title": "Least Common Multiple",
    "description": "Create a function called 'lcm' to determine the Least Common Multiple (LCM) of two positive integers.\n\nThe LCM is the smallest number that is a multiple of both numbers.",
    "functionName": "lcm",
    "initialCode": "function lcm(a, b) {\n  // Your code here\n}",
    "note": "To find the LCM, the function first calculates the Greatest Common Divisor (GCD) of the two numbers, and then uses it to determine the LCM.\n\nRemember, the LCM of 0 and any number is 0.",
    "solution": "function gcd(a, b) {\n  if (!b) return a;\n  return gcd(b, a % b);\n}\n\nfunction lcm(a, b) {\n  return (a === 0 || b === 0) ? 0 : Math.abs(a * b) / gcd(a, b);\n}"
  },
  {
    "id": 16,
    "level": "medium",
    "category": "Maths",
    "title": "Factorial",
    "description": "Create a function named 'factorial' that computes the factorial of a given non-negative integer, n.\n\nThe factorial of n (denoted as n!) is the product of all positive integers less than or equal to n.\n\nFor instance, the factorial of 5 (5!) is calculated as 5 x 4 x 3 x 2 x 1.",
    "functionName": "factorial",
    "initialCode": "function factorial(n) {\n  // Write your code here\n}",
    "note": "For the input 5, the function should return 120 as 5! equals 5 x 4 x 3 x 2 x 1 which is 120.\n\nFor the input 0, the function should return 1, since 0! is defined as 1.",
    "solution": "function factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}"
  },
  {
    "id": 17,
    "level": "easy",
    "category": "Maths",
    "title": "Check Prime",
    "description": "Implement a function 'isPrime' that checks whether a given integer is a prime number.\n\nA prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n\nThe function should return true if the number is prime and false otherwise.",
    "functionName": "isPrime",
    "initialCode": "function isPrime(num) {\n  // Your code here\n}",
    "note": "The number 1 is not prime by definition.\n\nFor numbers less than 10, only 2, 3, 5, and 7 are prime.\n\nThe function should efficiently handle larger numbers, avoiding unnecessary calculations.",
    "solution": "function isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n  if (num % 2 === 0 || num % 3 === 0) return false;\n  for (let i = 5; i * i <= num; i += 6) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n  }\n  return true;\n}"
  },
  {
    "id": 18,
    "level": "medium",
    "category": "OOP",
    "title": "University Departments Management",
    "description": "Design a class named 'University' with methods to manage its list of departments.\n\nEach department should be unique within the university.\n\nImplement methods within the class to add a new department [addDepartment], remove an existing department [removeDepartment], and retrieve a list of all departments [getDepartments].\n\nThe list of departments should not allow duplicates, ensuring the uniqueness of each department.",
    "functionName": "University",
    "initialCode": "class University {\n  // Write your code here\n  // Method to add a department\n  // Method to remove a department\n  // Method to get all departments\n}",
    "note": "When using the 'addDepartment' method to add a new department, it should only be added if it does not already exist.\n\nAttempting to remove a department that does not exist should have no effect.\n\nThe 'getDepartments' method should return an array of the current departments in the university.",
    "solution": "class University {\n  constructor(name) {\n    this.name = name;\n    this.departments = new Set();\n  }\n\n  addDepartment(departmentName) {\n    this.departments.add(departmentName);\n  }\n\n  removeDepartment(departmentName) {\n    this.departments.delete(departmentName);\n  }\n\n  getDepartments() {\n    return Array.from(this.departments);\n  }\n}"
  },
  {
    "id": 19,
    "level": "medium",
    "category": "Algorithm",
    "title": "First Occurrence Binary Search",
    "description": "Implement a function named 'findFirstOccurrence' that utilizes binary search to locate the first occurrence of a target element within a sorted array.\n\nIf the target element appears multiple times, the function should return the index of its first occurrence.\n\nIf the target element is not present in the array, the function should return -1.",
    "functionName": "findFirstOccurrence",
    "initialCode": "function findFirstOccurrence(arr, target) {\n  // Your code here\n}",
    "note": "For example, in an array [2, 4, 10, 10, 10, 18, 20], the first occurrence of the target element '10' is at index 2.\n\nThe function should return 2 in this case.",
    "solution": "function findFirstOccurrence(arr, target) {\n  let start = 0;\n  let end = arr.length - 1;\n  let result = -1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === target) {\n      result = mid;\n      end = mid - 1; // Continue searching to the left\n    } else if (arr[mid] < target) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return result;\n}"
  },
  {
    "id": 20,
    "level": "easy",
    "category": "Array",
    "title": "Find Leap Years",
    "description": "Write a function named 'findLeapYears' that identifies all the leap years within a specified range, from 'startYear' to 'endYear' inclusive.\n\nA leap year is identified as a year that is divisible by 4 but not by 100, unless it is also divisible by 400.\n\nThe function should return an array of all the leap years in the range.",
    "functionName": "findLeapYears",
    "initialCode": "function findLeapYears(startYear, endYear) {\n  // Your code here\n}",
    "note": "For instance, the range from 1990 to 2000 includes the leap years 1992, 1996, and 2000.\n\nThe function should return an array [1992, 1996, 2000].",
    "solution": "function findLeapYears(startYear, endYear) {\n  const leapYears = [];\n  for (let year = startYear; year <= endYear; year++) {\n    if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {\n      leapYears.push(year);\n    }\n  }\n  return leapYears;\n}"
  },
  {
    "id": 21,
    "level": "easy",
    "category": "Array",
    "title": "Merge Arrays and Remove Duplicates",
    "description": "Design a function called 'mergeAndDeduplicate' that takes two arrays, merges them, and removes any duplicate elements.\n\nThe resulting array should only contain unique elements from both arrays, preserving the order of the first occurrence of each element.",
    "functionName": "mergeAndDeduplicate",
    "initialCode": "function mergeAndDeduplicate(arr1, arr2) {\n  // Your code here\n}",
    "note": "When merging arrays [1, 3, 5] and [2, 3, 6], the function should return [1, 3, 5, 2, 6], maintaining the order from the original arrays and removing the duplicated '3'.",
    "solution": "function mergeAndDeduplicate(arr1, arr2) {\n  const mergedArray = arr1.concat(arr2);\n  return [...new Set(mergedArray)];\n}"
  },
  {
    "id": 22,
    "level": "easy",
    "category": "Maths",
    "title": "Calculate Sphere Volume",
    "description": "Develop a function called 'calculateSphereVolume' that calculates and returns the volume of a sphere. The function should accept the sphere's radius as a parameter.",
    "functionName": "calculateSphereVolume",
    "initialCode": "function calculateSphereVolume(radius) {\n  // Your code here\n}",
    "note": "The volume of a sphere is given by the formula 4/3 * π * radius^3. The function should return the result rounded to two decimal places using Math.PI for the π value.",
    "solution": "function calculateSphereVolume(radius) {\n  return +(4 / 3 * Math.PI * Math.pow(radius, 3)).toFixed(2);\n}"
  },
  {
    "id": 23,
    "level": "easy",
    "category": "Date and Time",
    "title": "Calculate Date Difference",
    "description": "Write a function named 'getDateDifference' that computes the number of full days between two given dates. It should take two date arguments and return the difference in days.",
    "functionName": "getDateDifference",
    "initialCode": "function getDateDifference(date1, date2) {\n  // Your code here\n}",
    "note": "The function should accurately calculate the difference irrespective of the order of the dates provided. It should account for leap years and other calendar nuances.",
    "solution": "function getDateDifference(date1, date2) {\n  const ONE_DAY = 1000 * 60 * 60 * 24;\n  const differenceMs = Math.abs(new Date(date2).getTime() - new Date(date1).getTime());\n  return Math.round(differenceMs / ONE_DAY);\n}"
  },
  {
    "id": 24,
    "level": "medium",
    "category": "String",
    "title": "Build Pyramid",
    "description": "Design a function titled 'build' that constructs a 'pyramid' structure with a specified number of floors. Each floor should be represented as a string of spaces and asterisks.",
    "functionName": "build",
    "initialCode": "function build(n) {\n  // Your code here\n}",
    "note": "The function should return an array where each element is a string representing a floor of the pyramid. Each floor should center-align the asterisks, with spaces on both sides as needed. Example of a 5-floor pyramid:\n    \"    *    \",\n    \"   ***   \",\n    \"  *****  \",\n    \" ******* \",\n    \"*********\"",
    "solution": "function build(n) {\n  if (n === null || typeof n !== 'number') throw new TypeError('Invalid input: Input must be a number');\n  if (n <= 0) throw new RangeError('Invalid input: Number of floors must be positive');\n  const pyramid = [];\n  for (let i = 0; i < n; i++) {\n    pyramid.push(' '.repeat(n - i - 1) + '*'.repeat(2 * i + 1) + ' '.repeat(n - i - 1));\n  }\n  return pyramid;\n}"
  }
]
